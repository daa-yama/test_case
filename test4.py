# 年齢（整数）を引数として受け取り、18歳以上なら「大人です」、18歳未満なら「未成年です」とターミナルに表示する関数 check_age を作ってください。
# 【条件】
# ・関数定義は5行で記述してください。
# ・呼び出しは1行で定義してください。
def check_age(age):#引数としてageを受け取る 
    if age < 18:#もし年齢が１８より小さい場合は未成年の出力 
        print("未成年です")
    else:#18より大きい場合。（それ以外の場合） 
        print("大人です")
check_age(17)
check_age(18)#実際の引数の数字を入れる 

# 補足＜ と ＞ の使い方（しっかり理解編）
# 	•	a < b : aがbより小さい（厳密不等号。等しいは含まない）
# 	•	a > b : aがbより大きい（厳密不等号。等しいは含まない）
# 	•	a <= b: aがb以下（等しいを含む）
# 	•	a >= b: aがb以上（等しいを含む）
# 	•	a == b: aとbが等しい（比較）
# 	•	a = b : 右辺を左辺に代入（比較ではない！よくある混同ポイント）
# 	•	a != b: aとbが等しくない

# 今回の要件は「18歳以上なら大人」。
# 	•	あなたの書き方：if age < 18:（18未満が未成年、それ以外＝18以上が大人）→要件に合う
# 	•	もう一つの等価な書き方：if age >= 18:（18以上が大人、そうでなければ未成年）

# 境界値（18歳ちょうど）の確認
# 	•	age = 18 → 18 < 18 はFalse → else側「大人です」✅
# 	•	age = 18 → age >= 18 はTrue → 「大人です」✅
# どちらの書き方でも18は大人になります。

#補足２
#   if 文で使うこれらの記号は、コンピューターへの「Yes/No質問」 だと考えると、とても分かりやすくなります。
#   `<` (小なり) の質問
#    * 記号の意味： 「左は、右 *より小さい* ですか？」
#    * あなたのコード： age < 18
#    * コンピューターへの質問：「age の中身は、18 より小さいですか？」
#   コンピューターの心の声
#    * check_age(17) の場合 → 17 < 18 → 「はい、小さいです(Yes)」→ if の中を実行
#    * check_age(18) の場合 → 18 < 18 → 「いいえ、同じです(No)」→ else の中を実行
#    * check_age(20) の場合 → 20 < 18 → 「いいえ、大きいです(No)」→ else の中を実行
#   `>` (大なり) の質問
#    * 記号の意味： 「左は、右 *より大きい* ですか？」
#    * コードの例： age > 18
#    * コンピューターへの質問：「age の中身は、18 より大きいですか？」
#   `=` との組み合わせ（以上・以下）

#   では、「18歳以上」のように、18歳ちょうどを含めたい場合はどうするのでしょうか。
#   ここで = が登場します。

#    * >= （以上）： 「左は、右 以上（大きいか、または等しい）ですか？」
#    * <= （以下）： 「左は、右 以下（小さいか、または等しい）ですか？」

#   なので、今回の問題は、以下のように > を使って書くこともできます。どちらも全く同じ意味になります。

#    1 def check_age(age):
#    2     if age >= 18: # もし age が 18 以上なら
#    3         print("大人です")
#    4     else: # そうでなければ（18歳未満なら）
#    5         print("未成年です")

# 応用問題 1：合否判定
#   テストの点数（整数）を引数として受け取り、60点以上なら「合格です」、60点未満なら「不合格です」と表示する関数 judge_score を作ってください。
#    * 呼び出し例:
#        * judge_score(85) → 「合格です」と表示
#        * judge_score(40) → 「不合格です」と表示
def judge_score(score):
    if score < 60:
        print("不合格です")
    else:
        print("合格です")
judge_score(85)
judge_score(40)

# 応用問題２：合格判定
# 	•	引数として**テストの点数（整数）**を受け取る関数 check_score を作ってください。
# 	•	60点以上なら「合格」、60点未満なら「不合格」と表示する。
# 	•	関数定義は5行以内、呼び出しは1行。
def check_score(score):
    if score < 60:
        print("不合格")
    else:
        print("合格")
check_score(59)
check_score(61)

# 応用問題３：送料チェック（計算あり）
#   ECサイトの購入金額（整数）を引数として受け取り、送料について表示する関数 check_shipping_fee を作ってください。
#    * 条件:
#        * 購入金額が5000円以上なら、「送料無料です。」と表示します。
#        * 購入金額が5000円未満なら、「あと〇〇円で送料無料になります。」と、5000円に足りない差額を計算して表示してください。
#    * 呼び出し例:
#        * check_shipping_fee(6000) → 「送料無料です。」と表示
#        * check_shipping_fee(3500) → 
def check_shipping_fee(fee):
    required_amount = 5000
    difference = required_amount - fee
    if fee < 5000:
        print(f"あと{difference}円で送料無料になります。")
    else:
        print("送料無料です。")
check_shipping_fee(5000)
check_shipping_fee(3500)
check_shipping_fee(4900)

#補足　プログラムが大きくなるとマジックナンバーを変数にしておかないと管理が大変になる。今回のようなシンプルなコードは以下の書き方でもOK。
# required_amount = 5000 の行を使わずにコードを書き直す場合、その変数を使っていた場所に直接 5000 という数値を書き込むことになります。
#   最もシンプルに書くと、以下のようになります。
#     1 def check_shipping_fee(fee):
#     2     if fee < 5000:
#     3         # 差額の計算をprint文の中で直接行い、difference変数も使わない
#     4         print(f"あと{5000 - fee}円で送料無料になります。")
#     5     else:
#     6         print("送料無料です。")
#   元のコードとの違いと解説
#   元のコード：
#    1 def check_shipping_fee(fee):
#    2     required_amount = 5000
#    3     difference = required_amount - fee
#    4     if fee < 5000:
#    5         print(f"あと{difference}円で送料無料になります。")
# 応用問題４：パスワード確認
#   パスワード（文字列）を引数として受け取り、正しいかどうかを判定する関数 check_password を作ってください。
#    * 条件:
#        * 正しいパスワードは "password123" とします。
#        * 引数として受け取ったパスワードが正しい場合は、「ログイン成功」と表示します。
#        * 間違っている場合は、「パスワードが違います」と表示します。
#    * 呼び出し例:
#        * check_password("password123") → 「ログイン成功」と表示
#        * check_password("hello") → 「パスワードが違います」と表示
def check_password(pw):
    if pw == "password123":
        print("ログイン成功")
    else:
        print("パスワードが違います")
check_password("password123") 
check_password("hello")       

#【補足】実際のアプリケーションでは
# このコードは練習問題としては完璧な正解ですが、一つだけ注意点があります。実際のWebサイトやアプリでは、このようにパスワードをプログラムの中に直接書き込む（ハードコーディングする）ことは絶対にありません。これは非常に危険な行為だからです。
#   実際のシステムでは、パスワードは「ハッシュ化」という特殊な暗号化処理を施されてからデータベースに保存され、入力されたパスワードも同様にハッシュ化してから比較されます。
# これにより、開発者や管理者でさえも、元のパスワードが何であるかを知ることができないようになっています。

#応用問題５：偶数・奇数判定（計算式あり）
# 引数として整数を受け取り、偶数なら「偶数です」、奇数なら「奇数です」と表示する関数 check_even_odd を作ってください。
# 偶数かどうかは割り算の余りを求める演算子 % を使って判定すること。
# 関数定義は5行以内、呼び出しは1行。
def check_even_odd(num):
    if num % 2 == 0:
        print("偶数です")
    else:
        print("奇数です")
check_even_odd(16)


# 応用問題６：温度判定
# 	•	引数として**気温（整数）**を受け取り、
# 	•	30℃以上なら「暑いです」
# 	•	15℃未満なら「寒いです」
# 	•	それ以外なら「ちょうどいいです」
# と表示する関数 check_temperature を作ってください。
# 	•	関数定義は7行以内（条件分岐が3パターンあるため）、呼び出しは1行。
def check_temperature(tem):
    if tem >= 30:
        print("暑いです")
    elif tem < 15:
        print("寒いです")
    else:
        print("ちょうどいいです")
check_temperature(15)
